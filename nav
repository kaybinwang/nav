#!/usr/local/bin/bash

declare -r NAV_PATH="$HOME/.config/nav"

function print_help() {
  cat <<EOM
usage: nav <command> [<args>]

A tool for managing shortcuts to frequently visited directories.

These are the available commands:

    add         Add a new shortcut to a directory
    update      Update an existing shortcut to a different directory
    list        List all the registered shortcuts
    to          Navigate to a directory using the provided shortcut
    help        Output additional information about a specific command

See 'nav help <command>' to read about a specific command.
EOM
}

function print_help_add() {
  cat <<EOM
usage: nav add <shortcut> <directory>

Add a new shortcut to the provided directory.
EOM
}

function print_help_update() {
  cat <<EOM
usage: nav update <shortcut> <directory>

Update an existing shortcut to the provided directory.
EOM
}

function print_help_list() {
  cat <<EOM
usage: nav list

Output all of the shortcuts.
EOM
}

function print_help_to() {
  cat <<EOM
usage: nav to <shortcut>

Navigate to the directory under the provided shortcut.
EOM
}

function nav_help() {
  local -r subcommand="$1"
  if [[ -z "$subcommand" ]]; then
    print_help
    exit 1
  fi
  case "$subcommand" in
    add)
      print_help_add ${@:2}
      ;;
    update)
      print_help_update ${@:2}
      ;;
    list)
      print_help_list ${@:2}
      ;;
    to)
      print_help_to ${@:2}
      ;;
    *)
      echo "Unrecognized command: $subcommand."
      print_help
      exit 1
      ;;
  esac
}

function nav_list() {
  echo "not implemented"
  exit 1
}

function nav_to() {
  echo "not implemented"
  exit 1
}

function nav_add() {
  local -r shortcut="$1"
  local -r directory="$2"
  if [[ -z "$shortcut" ]] || [ -z "$directory" ]; then
    echo "Please provide a shortcut and a directory."
    print_help_add
    exit 1
  fi

  local -r src="$(realpath "$directory")"
  if [[ $? -ne 0 ]]; then
    echo "Error: could not resolve the absolute path for $directory."
    exit 1
  fi
  if [[ ! -d "$src" ]]; then
    echo "Error: $directory is not a directory."
    exit 1
  fi

  local -r dst="$NAV_PATH/$shortcut"
  if [[ -e "$shortcut" ]]; then
    echo "Error: $shortcut already exists."
    exit 1
  fi

  mkdir -p "$NAV_PATH" &>/dev/null

  ln -s "$src" "$dst"
  local -r rv="$?"
  if [[ $rv -ne 0 ]]; then
    echo "Error: unable to add a shortcut from $shortcut to $directory."
    exit 1
  fi
  echo "Added a shortcut from $shortcut to $src!"
}

function main() {
  local -r subcommand="$1"
  if [[ -z "$subcommand" ]]; then
    print_help
    exit 1
  fi
  case "$subcommand" in
    add)
      nav_add ${@:2}
      ;;
    update)
      nav_add ${@:2}
      ;;
    list)
      nav_list ${@:2}
      ;;
    to)
      nav_to ${@:2}
      ;;
    help)
      nav_help ${@:2}
      ;;
    *)
      echo "Unrecognized command: $subcommand."
      print_help
      exit 1
      ;;
  esac
}

main $@
